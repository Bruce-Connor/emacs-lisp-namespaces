#+OPTIONS: toc:nil num:nil

* Names
[[file:package-example.png]]
/Example usage of Names to namespace an emacs-lisp function./
*** A Namespace implementation for Emacs-Lisp

The *Names* package aims to provide an implementation of
namespaces in Emacs with two guiding principles:

- Completeness :: It should support any macro/function/special-form
              available in emacs-lisp. Even the ones defined by you or
              a third party.
- Robustness :: No-surprises, well-tested, and with clearly stated
            limitations. Yes, as complete as we aim to be,
            there will be limitations.

See [[https://github.com/Bruce-Connor/spaces#why-a-namespace-package][Why a namespace package?]] for a description on why this is
necessary, and see [[https://github.com/Bruce-Connor/emacs-lisp-namespaces/blob/master/Other-Packages.org][Other-Packages.org]] for a description and comparison
of previous packages attempting similar things.

** Usage

To use this in your package:

1. Remember to list =names= as a dependency.
2. Wrap all code that's to be namespaced inside a =(define-namespace NAME ...)= macro.
3. Pleasantly remove all that redundant repetition from you code!
4. When quoting function names, use #' instead of '.
5. If you have =;;;###autoload= comments inside your =define-namespace=:
   1. Replace them with =:autoload= keywords
   2. Add an =;;;###autoload= tag immediately above your =define-namespace=.

*What you need to know:* There are essentially two rules that are applied when namespacing.
*** 1. Every definition gets namespaced
Any definitions inside =BODY= will have =NAME= prepended to the
symbol given:
#+begin_src emacs-lisp
;;;###autoload
(define-namespace foo-

(defvar bar 1 "docs")

:autoload
(defun free ()
  "DOC"
  (message "hi"))

(defalias 'bird 'free)
)
#+end_src
expands to
#+begin_src emacs-lisp
(defvar foo-bar 1 "docs")

;;;###autoload
(defun foo-free ()
  "DOC"
  (message "hi"))

(defalias 'foo-bird 'foo-free)
#+end_src

Note, in the last line, ='bird= is expanded because it is the name of
a definition, and ='free= is expanded because =foo-free= is known to
be defined.

*** 2. Functions and variables are namespaced if defined
Any function calls (or variable names) get NAME prepended to them if
the symbol in question is defined as a function (or a variable,
respectively) inside the current =define-namespace= form. It doesn't
matter if the function/variable is called before actually being
defined, *Names* will find it.

That is:
#+begin_src emacs-lisp
(define-namespace foo-

(defvar var infinite)

(defun infinite (x)
  (infinite x))

(cond
 ((infinite var) (message "That was a function call."))
 (infinite (message "That was a variable.")))
)
#+end_src
expands to
#+begin_src emacs-lisp
(defvar foo-myvar infinite)

(defun foo-infinite (x)
  (foo-infinite x))

(cond
 ((foo-infinite foo-var) (message "That was a function call."))
 (infinite (message "That was a variable.")))
#+end_src

Note how the =infinite= symbol gets namespaced only as a function name
(/not/ when it's used as a variable), because =define-namespace=
knowns that =foo-infinite= is not a variable.

*** Case-by-case Examples
In general, =define-namespace= should work as you expect it to. But if you
need to understand why something is or isn't being namespaced, have a
look at [[https://github.com/Bruce-Connor/emacs-lisp-namespaces/blob/master/TheNittyGritty.org][TheNittyGritty.org]]

** Keywords - Customizing the behaviour
Immediately after the name of your space you may add keywords which
customize the behaviour of =define-namespace=. See the variable
=names--keyword-list= for a description of each possible keyword.

*** :let-vars 
If this is present, variables defined in let forms become namespaced
(just like defvars). If this is absent, they are preserved.

For example, assuming both =foo-mo= and =foo-bar= have a variable
definitions, the code
#+begin_src emacs-lisp
(define-namespace foo-
(let ((bar mo)) ...)
)
#+end_src
expands to
#+begin_src emacs-lisp
(let ((bar foo-mo)) ...)
#+end_src
while
#+begin_src emacs-lisp
(define-namespace foo- :let-vars
(let ((bar mo)) ...)
)
#+end_src
expands to
#+begin_src emacs-lisp
(let ((foo-bar foo-mo)) ...)
#+end_src

** Why a namespace package?
Plain and simple: Emacs doesn't have namespaces, and it needs them.

Emacs takes the approach of prefixing every symbol name with the name
of the package. This successfully avoids name clashes between
packages, but it quickly leads to code that's repetitive and annoying
to write.

Below is an example from =package.el=, the word "/package/" is repeated
7 times in a 10-line function definition.

*Names* doesn't change this overall approach, in fact, it's
completely invisible to the end-user. *Names* simply gives /you/ (the
developer) a convenient way of writing code that adheres to this
standard.

[[file:package-example.png]]
/Example usage of Names to namespace an emacs-lisp function./

- At runtime, the right-hand-side will create the same definitions as the left-hand-side.
- At compilation, it will create the exact same compiled file (with no left-over reference to =names.el= functions).

*** Tested On:
*Names* is still in testing phase. If you're interested, try using it
 with one of your packages and [[https://github.com/Bruce-Connor/names/issues][let me know how it goes]]. Below are the
 packages which I've tested it on.
**** elnode
- *Number of ert tests passed:* Same as before namespacing (62).
- *Reduction in code size:* Approx. 2000 characters.
**** s.el
- *Number of ert tests passed:* All.
- *Reduction in code size:* Approx. 1000 characters (8%). 
1000 characters is a lot when you consider /s.el/ has the second
shortest namespace possible, =s-=.
**** dash.el
- *Number of ert tests passed:* Same as before namespacing (104).
